"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar JSON @scalar(class: "App\\GraphQL\\Scalars\\JSON")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "Returns current user"
    me: User @auth

    "Find a single page by an identifying attribute."
    page(
        "Search by primary key."
        id: ID @eq
    ): Page @find
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    pages: [Page!]! @hasMany

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

type Mutation {
    "Log in to a new session and get the user."
    login(email: String!, password: String!): User!

    "Log out from the current session, showing the user one last time."
    logout: User @guard

    register(
        name: String! @rules(apply: [ "required", "min:3", "max:50" ])
        username: String! @rules(apply: [ "required", "min:3", "unique:users,username" ])
        email: String! @rules(apply: [ "required", "email:rfc,dns", "unique:users,email" ])
        password: String! @rules(apply: [ "required", "min:6" ])
    ): User!

    createPage(input: CreatePageInput! @spread): Page @guard

    updatePage(input: UpdatePageInput! @spread): Page @guard


    createField(input: CreateFieldInput! @spread): Field @guard

    updateField(input: UpdateFieldInput! @spread): Field @guard

    dropField(input: DropFieldInput! @spread): Field @guard
}

type Page {
    id: ID!

    username: String

    meta: JSON!

    fields: [Field!]! @hasMany

    user: User! @belongsTo

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

input CreatePageInput {
    username: String!
    meta: JSON!
}

input UpdatePageInput {
    id: ID! @eq
    meta: JSON!
}

input CreateFieldInput @validator {
    pageId: ID!

    type: String!

    order: Int

    enabled: Boolean!

    meta: JSON!
}

input UpdateFieldInput @validator {
    id: ID! @eq

    order: Int

    enabled: Boolean

    meta: JSON
}

input DropFieldInput @validator {
    id: ID! @eq
}

type Field {
    id: ID!

    type: String!

    order: Int

    enabled: Boolean!

    meta: JSON!

    page: Page! @belongsTo

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}
